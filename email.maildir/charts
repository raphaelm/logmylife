#!/usr/bin/env python
# -*- coding: utf-8 -*-

ACCOUNT = "raphaelmichel95.gmail.com"
FILE = "%s.maildir.sqlite.db" % ACCOUNT
FILEPREFIX = "%s.maildir.chart." % ACCOUNT

ME = "(raphaelmichel95@(googlemail|gmail).com|.+@raphaelmichel.de|michel@schlusen.net|rami@daquel.de|raphaelm@php.net|raphael@geeksfactory.de)"


import sqlite3
import os
import re
from datetime import date, datetime, time, timedelta

import matplotlib.cm as cm
import matplotlib.pyplot as plt
import matplotlib.dates as md
	
	
"""
Ideas:
	* Time until first response (me and others) (histogram)
"""

def daterange(start_date, end_date):
	for n in range((end_date - start_date).days):
		yield start_date + timedelta(n)

class MailDirCharts:
		
	def chart_date_time(self):
		
		x_total = []
		y_total = []
		x_out = []
		y_out = []
		x_in = []
		y_in = []
		
		mere = re.compile(self.ME)
		
		self.c.execute('SELECT msg_time, msg_from, msg_to, msgid FROM mails WHERE msg_time > 0')
		for row in self.c:
			ts = row[0]
			x = date.fromtimestamp(ts)
			y = (ts % (3600*24))/3600
			if mere.match(row[1]) is None or mere.match(row[2]) is not None:
				# Mails to myself shouldn't be counted, they are either spam
				# or "irrelevant" for my communication profile
				x_in.append(x)
				y_in.append(y)
			else:
				x_out.append(x)
				y_out.append(y)
			x_total.append(x)
			y_total.append(y)
			
			
			
		# Total Scatter
		plt.clf()
		ax = plt.subplot(111)
		x_total = md.date2num(x_total)
		plt.scatter(x_in, y_in, s=3, marker=(0,3,0), linewidths=0, c='g', label='Incoming')
		plt.scatter(x_out, y_out, s=3, marker=(0,3,0), linewidths=0, c='b', label='Outgoing')
		plt.legend(loc=3)
		labels = ax.get_xticklabels()
		plt.setp(labels, rotation=30, fontsize=10)
		plt.axis([min(x_total), max(x_total), 0, 24])
		plt.title("Mail (total)")
		ax.xaxis_date()
		plt.yticks(range(0, 25))
		ax.xaxis.set_major_formatter( md.DateFormatter('%m/%Y') )
		ax.set_ylabel("time of day")
		plt.savefig(self.FILEPREFIX+"times_total.png")
		self.charts.append(self.FILEPREFIX+"times_total.png")
			
		# Total Histogram
		plt.clf()
		ax = plt.subplot(111)
		#plt.hist(y_in, bins=range(0,25), color='g', label='Incoming')
		#plt.hist(y_out, bins=range(0,25), color='b', label='Outgoing')
		plt.hist([y_out, y_in], bins=range(0,25), color=['b', 'g'], label=['outgoing', 'incoming'], histtype='barstacked')
		plt.xlim(0,24)
		plt.legend(loc=0)
		plt.title("Mail distribution (total)")
		plt.xticks(range(0, 25))
		ax.set_xlabel("time of day")
		plt.savefig(self.FILEPREFIX+"times_total.hist.png")
		self.charts.append(self.FILEPREFIX+"times_total.hist.png")
			
		# Incoming Scatter
		plt.clf()
		ax = plt.subplot(111)
		x_in = md.date2num(x_in)
		plt.scatter(x_in, y_in, s=3, marker=(0,3,0), linewidths=0, c='g')
		labels = ax.get_xticklabels()
		plt.setp(labels, rotation=30, fontsize=10)
		plt.axis([min(x_total), max(x_total), 0, 24])
		plt.title("Mail (incoming)")
		ax.xaxis_date()
		plt.yticks(range(0, 25))
		ax.xaxis.set_major_formatter( md.DateFormatter('%m/%Y') )
		ax.set_ylabel("time of day")
		plt.savefig(self.FILEPREFIX+"times_in.png")
		self.charts.append(self.FILEPREFIX+"times_in.png")
			
		# Incoming Histogram
		plt.clf()
		ax = plt.subplot(111)
		plt.hist(y_in, bins=range(0,25), color='g', label='Incoming')
		plt.xlim(0,24)
		plt.title("Mail distribution (incoming)")
		plt.xticks(range(0, 25))
		ax.set_xlabel("time of day")
		plt.savefig(self.FILEPREFIX+"times_in.hist.png")
		self.charts.append(self.FILEPREFIX+"times_in.hist.png")
			
		# Outgoing Scatter
		plt.clf()
		ax = plt.subplot(111)
		x_out = md.date2num(x_out)
		plt.scatter(x_out, y_out, s=3, marker=(0,3,0), linewidths=0, c='b')
		labels = ax.get_xticklabels()
		plt.setp(labels, rotation=30, fontsize=10)
		plt.axis([min(x_total), max(x_total), 0, 24])
		plt.title("Mail (outgoing)")
		ax.xaxis_date()
		plt.yticks(range(0, 25))
		ax.xaxis.set_major_formatter( md.DateFormatter('%m/%Y') )
		ax.set_ylabel("time of day")
		plt.savefig(self.FILEPREFIX+"times_out.png")
		self.charts.append(self.FILEPREFIX+"times_out.png")
			
		# Outgoing Histogram
		plt.clf()
		ax = plt.subplot(111)
		plt.hist(y_out, bins=range(0,25), color='b', label='Outgoing')
		plt.xlim(0,24)
		plt.title("Mail distribution (outgoing)")
		plt.xticks(range(0, 25))
		ax.set_xlabel("time of day")
		plt.savefig(self.FILEPREFIX+"times_out.hist.png")
		self.charts.append(self.FILEPREFIX+"times_out.hist.png")

	def chart_filesize(self):
		x_total = []
		x_out = []
		x_in = []
		
		mere = re.compile(self.ME)
		
		self.c.execute('SELECT filesize, msg_from, msg_to FROM mails')
		for row in self.c:
			fs = row[0]
			x = fs
			if mere.match(row[1]) is None or mere.match(row[2]) is not None:
				# Mails to myself shouldn't be counted, they are either spam
				# or "irrelevant" for my communication profile
				x_in.append(x)
			else:
				x_out.append(x)
			x_total.append(x)
		
		plt.clf()
		ax = plt.subplot(111)
		plt.hist([x_out, x_in], bins=30, color=['b', 'g'], label=['outgoing', 'incoming'], log=True)
		plt.title("Mail size (distribution)")
		ax.set_xlabel("bytes")
		ax.set_ylabel("count")
		plt.legend(loc=0)
		plt.ylim(ymin=1)
		plt.savefig(self.FILEPREFIX+"size.png")
		self.charts.append(self.FILEPREFIX+"size.png")
		
	def chart_mailsperday(self):
		self.c.execute('SELECT MIN(msg_time), MAX(msg_time) FROM mails')
		firstmail, lastmail = self.c.fetchone()
		x_out = []
		x_in = []
		day_out = {}
		day_in = {}
		days = []
		month = 0
		months = []
		x_months_in = []
		x_months_out = []
		
		mere = re.compile(self.ME)
		
		self.c.execute('SELECT msg_time, msg_from, msg_to, msgid FROM mails WHERE msg_time > 0')
		for row in self.c:
			ts = row[0]
			x = date.fromtimestamp(ts)
			d = x.isoformat()
			if mere.match(row[1]) is None or mere.match(row[2]) is not None:
				# Mails to myself shouldn't be counted, they are either spam
				# or "irrelevant" for my communication profile
				if d in day_in:
					day_in[d] += 1
				else:
					day_in[d] = 1
			else:
				if d in day_out:
					day_out[d] += 1
				else:
					day_out[d] = 1

		for single_date in daterange(date.fromtimestamp(firstmail), date.fromtimestamp(lastmail)):
			days.append(single_date)
			d = single_date.isoformat()
				
			if d[0:7] != month:
				month = d[0:7]
				months.append(single_date)
				x_months_in.append([0,0])
				x_months_out.append([0,0])
				
			if d in day_in:
				x_in.append(day_in[d])
				x_months_in[len(x_months_in)-1][0] += day_in[d]
			else:
				x_in.append(0)
			if d in day_out:
				x_out.append(day_out[d])
				x_months_out[len(x_months_out)-1][0] += day_out[d]
			else:
				x_out.append(0)
			x_months_in[len(x_months_in)-1][1] += 1
			x_months_out[len(x_months_out)-1][1] += 1
			
		days = md.date2num(days)
		months = md.date2num(months)
		x_months_out = [float(_x[0])/float(_x[1]) for _x in x_months_out]
		x_months_in = [float(_x[0])/float(_x[1]) for _x in x_months_in]
		
		plt.clf()
		ax = plt.subplot(111)
		plt.plot(days, x_out, 'b', label='outgoing')
		plt.plot(days, x_in, 'g', label='incoming')
		plt.title("Mails per day")
		ax.set_ylabel("count")
		ax.xaxis_date()
		plt.axis([min(days), max(days), 0, max((max(x_in), max(x_out)))+5])
		ax.xaxis.set_major_formatter( md.DateFormatter('%m/%Y') )
		labels = ax.get_xticklabels()
		plt.legend(loc=0)
		plt.setp(labels, rotation=30, fontsize=10)
		plt.savefig(self.FILEPREFIX+"perday.png")
		self.charts.append(self.FILEPREFIX+"perday.png")
		
		plt.clf()
		ax = plt.subplot(111)
		plt.plot(months, x_months_out, 'b', label='outgoing')
		plt.plot(months, x_months_in, 'g', label='incoming')
		plt.title("Mails per day (averaged by month)")
		ax.set_ylabel("count")
		ax.xaxis_date()
		plt.axis([min(months), max(months), 0, max((max(x_months_in), max(x_months_out)))+5])
		ax.xaxis.set_major_formatter( md.DateFormatter('%m/%Y') )
		labels = ax.get_xticklabels()
		plt.legend(loc=0)
		plt.setp(labels, rotation=30, fontsize=10)
		plt.savefig(self.FILEPREFIX+"perday.avg.png")
		self.charts.append(self.FILEPREFIX+"perday.avg.png")
		
		plt.clf()
		ax = plt.subplot(111)
		plt.hist([x_out, x_in], bins=100, color=['b', 'g'], label=['outgoing', 'incoming'], histtype='barstacked', log=False)
		plt.title("Mails per day (distribution)")
		ax.set_xlabel("count")
		ax.set_ylabel("days")
		plt.xlim(0, 50)
		plt.legend(loc=0)
		plt.savefig(self.FILEPREFIX+"perday.hist.png")
		self.charts.append(self.FILEPREFIX+"perday.hist.png")
		
	def create_simple_html(self):
		global ACCOUNT
		html = "<html><head>"
		html += "<title>E-Mail statistics for %s</title>" % ACCOUNT
		html += "</head><body><a href='../'>Overview</a><br />"
		for c in self.charts:
			html += "<img src='"+c+"' /><br />"
		html += "</body></html>"
		f = open(self.FILEPREFIX+"all.html", "w")
		f.write(html)
		f.close()
		
	def create(self):		
		self.charts = []
		self.chart_date_time()
		self.chart_filesize()
		self.chart_mailsperday()
		self.create_simple_html()
			
	def __init__(self, FILE, FILEPREFIX, ME):
		self.FILEPREFIX = FILEPREFIX
		self.FILE = FILE
		self.ME = ME
		
		if os.path.exists(FILE):
			self.conn = sqlite3.connect(FILE)
			self.c = self.conn.cursor()
		else:
			print "Database not found!"
			sys.exit()
		self.conn.text_factory = str
		
c = MailDirCharts(FILE, FILEPREFIX, ME)
c.create()

