#!/usr/bin/env python
# -*- coding: utf-8 -*-

USER = "rami95"
FILE = "%s.lastfm.sqlite.db" % USER
FILEPREFIX = "%s.lastfm.chart." % USER


import sqlite3
import os
from datetime import date, datetime, timedelta
import time

import matplotlib.cm as cm
import matplotlib.pyplot as plt
import matplotlib.dates as md
from numpy import arange
	
def daterange(start_date, end_date):
	for n in range((end_date - start_date).days):
		yield start_date + timedelta(n)
		
class MusicCharts:
		
	def chart_date_time(self):
		
		x_total = []
		y_total = []
		
		self.c.execute('SELECT timestamp FROM tracks')
		for row in self.c:
			ts = row[0]
			x = date.fromtimestamp(ts)
			y = (ts % (3600*24))/3600
			x_total.append(x)
			y_total.append(y)
			
		# Tracks Scatter
		plt.clf()
		ax = plt.subplot(111)
		x_total = md.date2num(x_total)
		plt.scatter(x_total, y_total, s=2, marker=(0,3,0), linewidths=0)
		labels = ax.get_xticklabels()
		plt.setp(labels, rotation=30, fontsize=10)
		min_t = min(x_total)
		max_t = max(x_total)
		plt.axis([min_t, max_t, 0, 24])
		plt.title("Listening to music")
		ax.xaxis_date()
		plt.yticks(range(0, 25))
		ax.xaxis.set_major_formatter( md.DateFormatter('%m/%Y') )
		ax.set_ylabel("time of day")
		plt.savefig(self.FILEPREFIX+"times.png")
			
		# Tracks Histogram
		plt.clf()
		ax = plt.subplot(111)
		plt.hist(y_total, bins=range(0,25))
		plt.xlim(0,24)
		plt.title("Listening to music (distribution)")
		plt.xticks(range(0, 25))
		ax.set_xlabel("time of day")
		plt.savefig(self.FILEPREFIX+"times.hist.png")
		
	def chart_tracksperday(self):
		self.c.execute('SELECT MIN(timestamp), MAX(timestamp) FROM tracks')
		firstt, lastt = self.c.fetchone()
		x = []
		days = []
		day = {}
		month = 0
		months = []
		x_months = []
		
		self.c.execute('SELECT timestamp FROM tracks WHERE timestamp > 0')
		for row in self.c:
			ts = row[0]
			d = date.fromtimestamp(ts).isoformat()
			if d in day:
				day[d] += 1
			else:
				day[d] = 1

		for single_date in daterange(date.fromtimestamp(firstt), date.fromtimestamp(lastt)):
			days.append(single_date)
			d = single_date.isoformat()
			if d[0:7] != month:
				month = d[0:7]
				months.append(single_date)
				x_months.append([0,0])
				
			if d in day:
				x.append(day[d])
				x_months[len(x_months)-1][0] += day[d]
			else:
				x.append(0)
			x_months[len(x_months)-1][1] += 1
		
		days = md.date2num(days)
		months = md.date2num(months)
		x_months = [float(_x[0])/float(_x[1]) for _x in x_months]
		
		plt.clf()
		ax = plt.subplot(111)
		plt.hist(x, bins=30, color='b')
		plt.title("Tracks played per day (distribution)")
		ax.set_xlabel("count")
		ax.set_ylabel("days")
		plt.savefig(self.FILEPREFIX+"perday.hist.png")
		
		plt.clf()
		ax = plt.subplot(111)
		plt.plot(days, x)
		plt.title("Tracks played per day")
		ax.set_ylabel("count")
		ax.xaxis_date()
		plt.axis([min(days), max(days), 0, max(x)+5])
		ax.xaxis.set_major_formatter( md.DateFormatter('%m/%Y') )
		labels = ax.get_xticklabels()
		plt.setp(labels, rotation=30, fontsize=10)
		plt.savefig(self.FILEPREFIX+"perday.png")
		
		plt.clf()
		ax = plt.subplot(111)
		plt.plot(months, x_months)
		plt.title("Tracks played per day (averaged by month)")
		ax.set_ylabel("count")
		ax.xaxis_date()
		plt.axis([min(months), max(months), 0, max(x_months)+5])
		ax.xaxis.set_major_formatter( md.DateFormatter('%m/%Y') )
		labels = ax.get_xticklabels()
		plt.setp(labels, rotation=30, fontsize=10)
		plt.savefig(self.FILEPREFIX+"perday.avg.png")
		
	def chart_toptracks_range(self, start = 0, label = "total", n = 20):
		artists = []
		values = []		
		self.c.execute('SELECT name, COUNT(*) as cnt FROM tracks WHERE timestamp > %d GROUP by name ORDER by cnt DESC LIMIT %d' % (start, n))
		for row in self.c:
			artists.append(unicode(row[0], 'utf-8'))
			values.append(row[1])
		plt.clf()
		ax = plt.subplot(111)
		plt.barh(range(0,n), values, align='center', height=1)
		plt.yticks(range(0,n), artists)
		plt.autoscale()
		plt.subplots_adjust(left=0.25, right=0.9)
		plt.title("Top tracks ("+label+")")
		ax.set_xlabel("times played")
		plt.savefig(self.FILEPREFIX+"topatracks."+label+".png")
		
	def charts_toptracks(self):
		self.chart_toptracks_range(0, "total")
		self.chart_toptracks_range(time.time()-3600*24*7, "last week")
		self.chart_toptracks_range(time.time()-3600*24*31, "last month")
		self.chart_toptracks_range(time.time()-3600*24*365, "last year")
		
	def chart_topartists_range(self, start = 0, label = "total", n = 20):
		artists = []
		values = []		
		self.c.execute('SELECT artist, COUNT(*) as cnt FROM tracks WHERE timestamp > %d GROUP by artist ORDER by cnt DESC LIMIT %d' % (start, n))
		for row in self.c:
			artists.append(unicode(row[0], 'utf-8'))
			values.append(row[1])
		plt.clf()
		ax = plt.subplot(111)
		plt.barh(range(0,n), values, align='center', height=1)
		plt.yticks(range(0,n), artists)
		plt.autoscale()
		plt.subplots_adjust(left=0.25, right=0.9)
		plt.title("Top artists ("+label+")")
		ax.set_xlabel("tracks played")
		plt.savefig(self.FILEPREFIX+"topartists."+label+".png")
		
	def charts_topartists(self):
		self.chart_topartists_range(0, "total")
		self.chart_topartists_range(time.time()-3600*24*7, "last week")
		self.chart_topartists_range(time.time()-3600*24*31, "last month")
		self.chart_topartists_range(time.time()-3600*24*365, "last year")
		
	def create(self):		
		self.chart_date_time()
		self.chart_tracksperday()
		self.charts_topartists()
		self.charts_toptracks()
			
	def __init__(self, FILE, FILEPREFIX):
		self.FILEPREFIX = FILEPREFIX
		self.FILE = FILE
		
		if os.path.exists(FILE):
			self.conn = sqlite3.connect(FILE)
			self.c = self.conn.cursor()
		else:
			print "Database not found!"
			sys.exit()
		self.conn.text_factory = str
		
c = MusicCharts(FILE, FILEPREFIX)
c.create()

